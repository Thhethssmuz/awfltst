'use strict';

const test = require('..');
const exec = require('./exec');


test('harness.before', async function () {
  let result;

  result = await exec('test/spawn/before.test.js');
  this.eq(result.stdout, [
    '',
    '  1 (anonymous) _ ms',
    '',
    '    ✔ equals \'before\'',
    '    ✔ equals \'test\'',
    '',
    '      1.1 (anonymous) _ ms',
    '',
    '        ✔ equals \'inner.before\'',
    '        ✔ equals \'inner.test\'',
    '',
    '',
    '  All tests passed!',
    '',
    '',
    '  Total:      2 tests   4 assertions',
    '  Passing:    2 tests   4 assertions',
    '  Duration:   _ ms',
    ''], 'test');

  result = await exec('test/spawn/before.error.js');
  this.eq(result.stdout.filter(x => !/^\s+ at /.test(x)), [
    '',
    '  1 test 1 _ ms',
    '',
    '    ✔ before',
    '',
    '    ✘ before',
    '',
    '      At:       ./test/spawn/before.error.js (10:8)',
    '      Operator: fail',
    '',
    '    ✘ uncaught error',
    '',
    '      At:       ./test/spawn/before.error.js (13:6)',
    '      Operator: error',
    '      Actual:',
    '        Error: fail',
    '',
    '  2 test 2 _ ms',
    '',
    '    ✔ before',
    '',
    '    ✘ before',
    '',
    '      At:       ./test/spawn/before.error.js (10:8)',
    '      Operator: fail',
    '',
    '    ✘ uncaught error',
    '',
    '      At:       ./test/spawn/before.error.js (13:6)',
    '      Operator: error',
    '      Actual:',
    '        Error: fail',
    '',
    '',
    '  Failed Tests: There was 2 failed tests with 4 failed assertions!',
    '',
    '',
    '  Total:      2 tests   6 assertions',
    '  Passing:    0 tests   2 assertions',
    '  Failing:    2 tests   4 assertions',
    '  Duration:   _ ms',
    ''], 'error');

  result = await exec('test/spawn/before.mixed.js');
  this.eq(result.stdout, [
    '',
    '  1 mixed _ ms',
    '',
    '    Top-level before (once)',
    '    Top-level before',
    '',
    '      1.1 Subtest 1 (inline) _ ms',
    '',
    '      1.2 Subtest 4 (inline) _ ms',
    '',
    '    ✔ ok',
    '',
    '      1.3 Subtest 2 (harness) _ ms',
    '',
    '        Before 1',
    '        Before 2',
    '',
    '      1.4 Subtest 3 (harness) _ ms',
    '',
    '        Before 1',
    '        Before 2',
    '',
    '  2 (anonymous) _ ms',
    '',
    '    Top-level before',
    '',
    '',
    '  All tests passed!',
    '',
    '',
    '  Total:      6 tests   1 assertion',
    '  Passing:    6 tests   1 assertion',
    '  Duration:   _ ms',
    ''], 'mixed');

  this
    .chain('group')
    .eq((await exec('test/spawn/before.group.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    Before all',
      '    Not before A',
      '    Not before B',
      '    Not before A or B',
      '',
      '  2 A _ ms',
      '',
      '    Before all',
      '    Before A',
      '    Before A or B',
      '    Not before B',
      '',
      '  3 B _ ms',
      '',
      '    Before all',
      '    Before B',
      '    Before A or B',
      '    Not before A',
      '',
      '  4 A and B _ ms',
      '',
      '    Before all',
      '    Before A',
      '    Before B',
      '    Before A or B',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    4 tests   0 assertions',
      '  Duration:   _ ms',
      ''], 'all')
    .chain('run only')
    .eq((await exec('--only=none', 'test/spawn/before.group.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    Before all',
      '    Not before A',
      '    Not before B',
      '    Not before A or B',
      '',
      '  2 A (skipped)',
      '  3 B (skipped)',
      '  4 A and B (skipped)',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    1 test    0 assertions',
      '  Skipped:    3 tests',
      '  Duration:   _ ms',
      ''], 'none')
    .eq((await exec('--only=A', 'test/spawn/before.group.js')).stdout, [
      '',
      '  1 none (skipped)',
      '',
      '  2 A _ ms',
      '',
      '    Before all',
      '    Before A',
      '    Before A or B',
      '    Not before B',
      '',
      '  3 B (skipped)',
      '  4 A and B (skipped)',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    1 test    0 assertions',
      '  Skipped:    3 tests',
      '  Duration:   _ ms',
      ''], 'A')
    .eq((await exec('--only=B', 'test/spawn/before.group.js')).stdout, [
      '',
      '  1 none (skipped)',
      '  2 A (skipped)',
      '',
      '  3 B _ ms',
      '',
      '    Before all',
      '    Before B',
      '    Before A or B',
      '    Not before A',
      '',
      '  4 A and B (skipped)',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    1 test    0 assertions',
      '  Skipped:    3 tests',
      '  Duration:   _ ms',
      ''], 'B')
    .eq((await exec('--only=A and B', 'test/spawn/before.group.js')).stdout, [
      '',
      '  1 none (skipped)',
      '  2 A (skipped)',
      '  3 B (skipped)',
      '',
      '  4 A and B _ ms',
      '',
      '    Before all',
      '    Before A',
      '    Before B',
      '    Before A or B',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    1 test    0 assertions',
      '  Skipped:    3 tests',
      '  Duration:   _ ms',
      ''], 'A and B')
    .unchain()
    .chain('run skip')
    .eq((await exec('--skip=none', 'test/spawn/before.group.js')).stdout, [
      '',
      '  1 none (skipped)',
      '',
      '  2 A _ ms',
      '',
      '    Before all',
      '    Before A',
      '    Before A or B',
      '    Not before B',
      '',
      '  3 B _ ms',
      '',
      '    Before all',
      '    Before B',
      '    Before A or B',
      '    Not before A',
      '',
      '  4 A and B _ ms',
      '',
      '    Before all',
      '    Before A',
      '    Before B',
      '    Before A or B',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    3 tests   0 assertions',
      '  Skipped:    1 test',
      '  Duration:   _ ms',
      ''], 'none')
    .eq((await exec('--skip=A', 'test/spawn/before.group.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    Before all',
      '    Not before A',
      '    Not before B',
      '    Not before A or B',
      '',
      '  2 A (skipped)',
      '',
      '  3 B _ ms',
      '',
      '    Before all',
      '    Before B',
      '    Before A or B',
      '    Not before A',
      '',
      '  4 A and B _ ms',
      '',
      '    Before all',
      '    Before A',
      '    Before B',
      '    Before A or B',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    3 tests   0 assertions',
      '  Skipped:    1 test',
      '  Duration:   _ ms',
      ''], 'A')
    .eq((await exec('--skip=B', 'test/spawn/before.group.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    Before all',
      '    Not before A',
      '    Not before B',
      '    Not before A or B',
      '',
      '  2 A _ ms',
      '',
      '    Before all',
      '    Before A',
      '    Before A or B',
      '    Not before B',
      '',
      '  3 B (skipped)',
      '',
      '  4 A and B _ ms',
      '',
      '    Before all',
      '    Before A',
      '    Before B',
      '    Before A or B',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    3 tests   0 assertions',
      '  Skipped:    1 test',
      '  Duration:   _ ms',
      ''], 'B')
    .eq((await exec('--skip=A and B', 'test/spawn/before.group.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    Before all',
      '    Not before A',
      '    Not before B',
      '    Not before A or B',
      '',
      '  2 A _ ms',
      '',
      '    Before all',
      '    Before A',
      '    Before A or B',
      '    Not before B',
      '',
      '  3 B _ ms',
      '',
      '    Before all',
      '    Before B',
      '    Before A or B',
      '    Not before A',
      '',
      '  4 A and B (skipped)',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    3 tests   0 assertions',
      '  Skipped:    1 test',
      '  Duration:   _ ms',
      ''], 'A and B')
    .unchain()
    .chain('run group')
    .eq((await exec('--group=A', 'test/spawn/before.group.js')).stdout, [
      '',
      '  1 none (skipped)',
      '',
      '  2 A _ ms',
      '',
      '    Before all',
      '    Before A',
      '    Before A or B',
      '    Not before B',
      '',
      '  3 B (skipped)',
      '',
      '  4 A and B _ ms',
      '',
      '    Before all',
      '    Before A',
      '    Before B',
      '    Before A or B',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    2 tests   0 assertions',
      '  Skipped:    2 tests',
      '  Duration:   _ ms',
      ''], 'A')
    .eq((await exec('--group=B', 'test/spawn/before.group.js')).stdout, [
      '',
      '  1 none (skipped)',
      '  2 A (skipped)',
      '',
      '  3 B _ ms',
      '',
      '    Before all',
      '    Before B',
      '    Before A or B',
      '    Not before A',
      '',
      '  4 A and B _ ms',
      '',
      '    Before all',
      '    Before A',
      '    Before B',
      '    Before A or B',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    2 tests   0 assertions',
      '  Skipped:    2 tests',
      '  Duration:   _ ms',
      ''], 'B')
    .unchain()
    .chain('run skip-group')
    .eq((await exec('--skip-group=A', 'test/spawn/before.group.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    Before all',
      '    Not before A',
      '    Not before B',
      '    Not before A or B',
      '',
      '  2 A (skipped)',
      '',
      '  3 B _ ms',
      '',
      '    Before all',
      '    Before B',
      '    Before A or B',
      '    Not before A',
      '',
      '  4 A and B (skipped)',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    2 tests   0 assertions',
      '  Skipped:    2 tests',
      '  Duration:   _ ms',
      ''], 'A')
    .eq((await exec('--skip-group=B', 'test/spawn/before.group.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    Before all',
      '    Not before A',
      '    Not before B',
      '    Not before A or B',
      '',
      '  2 A _ ms',
      '',
      '    Before all',
      '    Before A',
      '    Before A or B',
      '    Not before B',
      '',
      '  3 B (skipped)',
      '  4 A and B (skipped)',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    2 tests   0 assertions',
      '  Skipped:    2 tests',
      '  Duration:   _ ms',
      ''], 'B');

  this
    .chain('once')
    .eq((await exec('test/spawn/before.once.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    Before all',
      '    Not before A',
      '    Not before B',
      '    Not before A or B',
      '',
      '  2 A _ ms',
      '',
      '    Before A',
      '    Before A or B',
      '',
      '  3 B _ ms',
      '',
      '    Before B',
      '',
      '  4 A and B _ ms',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    4 tests   0 assertions',
      '  Duration:   _ ms',
      ''], 'all')
    .chain('run only')
    .eq((await exec('--only=none', 'test/spawn/before.once.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    Before all',
      '    Not before A',
      '    Not before B',
      '    Not before A or B',
      '',
      '  2 A (skipped)',
      '  3 B (skipped)',
      '  4 A and B (skipped)',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    1 test    0 assertions',
      '  Skipped:    3 tests',
      '  Duration:   _ ms',
      ''], 'none')
    .eq((await exec('--only=A', 'test/spawn/before.once.js')).stdout, [
      '',
      '  1 none (skipped)',
      '',
      '  2 A _ ms',
      '',
      '    Before all',
      '    Before A',
      '    Before A or B',
      '    Not before B',
      '',
      '  3 B (skipped)',
      '  4 A and B (skipped)',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    1 test    0 assertions',
      '  Skipped:    3 tests',
      '  Duration:   _ ms',
      ''], 'A')
    .eq((await exec('--only=B', 'test/spawn/before.once.js')).stdout, [
      '',
      '  1 none (skipped)',
      '  2 A (skipped)',
      '',
      '  3 B _ ms',
      '',
      '    Before all',
      '    Before B',
      '    Before A or B',
      '    Not before A',
      '',
      '  4 A and B (skipped)',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    1 test    0 assertions',
      '  Skipped:    3 tests',
      '  Duration:   _ ms',
      ''], 'B')
    .eq((await exec('--only=A and B', 'test/spawn/before.once.js')).stdout, [
      '',
      '  1 none (skipped)',
      '  2 A (skipped)',
      '  3 B (skipped)',
      '',
      '  4 A and B _ ms',
      '',
      '    Before all',
      '    Before A',
      '    Before B',
      '    Before A or B',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    1 test    0 assertions',
      '  Skipped:    3 tests',
      '  Duration:   _ ms',
      ''], 'A and B')
    .unchain()
    .chain('run skip')
    .eq((await exec('--skip=none', 'test/spawn/before.once.js')).stdout, [
      '',
      '  1 none (skipped)',
      '',
      '  2 A _ ms',
      '',
      '    Before all',
      '    Before A',
      '    Before A or B',
      '    Not before B',
      '',
      '  3 B _ ms',
      '',
      '    Before B',
      '    Not before A',
      '',
      '  4 A and B _ ms',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    3 tests   0 assertions',
      '  Skipped:    1 test',
      '  Duration:   _ ms',
      ''], 'none')
    .eq((await exec('--skip=A', 'test/spawn/before.once.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    Before all',
      '    Not before A',
      '    Not before B',
      '    Not before A or B',
      '',
      '  2 A (skipped)',
      '',
      '  3 B _ ms',
      '',
      '    Before B',
      '    Before A or B',
      '',
      '  4 A and B _ ms',
      '',
      '    Before A',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    3 tests   0 assertions',
      '  Skipped:    1 test',
      '  Duration:   _ ms',
      ''], 'A')
    .eq((await exec('--skip=B', 'test/spawn/before.once.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    Before all',
      '    Not before A',
      '    Not before B',
      '    Not before A or B',
      '',
      '  2 A _ ms',
      '',
      '    Before A',
      '    Before A or B',
      '',
      '  3 B (skipped)',
      '',
      '  4 A and B _ ms',
      '',
      '    Before B',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    3 tests   0 assertions',
      '  Skipped:    1 test',
      '  Duration:   _ ms',
      ''], 'B')
    .eq((await exec('--skip=A and B', 'test/spawn/before.once.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    Before all',
      '    Not before A',
      '    Not before B',
      '    Not before A or B',
      '',
      '  2 A _ ms',
      '',
      '    Before A',
      '    Before A or B',
      '',
      '  3 B _ ms',
      '',
      '    Before B',
      '',
      '  4 A and B (skipped)',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    3 tests   0 assertions',
      '  Skipped:    1 test',
      '  Duration:   _ ms',
      ''], 'A and B')
    .unchain()
    .chain('run group')
    .eq((await exec('--group=A', 'test/spawn/before.once.js')).stdout, [
      '',
      '  1 none (skipped)',
      '',
      '  2 A _ ms',
      '',
      '    Before all',
      '    Before A',
      '    Before A or B',
      '    Not before B',
      '',
      '  3 B (skipped)',
      '',
      '  4 A and B _ ms',
      '',
      '    Before B',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    2 tests   0 assertions',
      '  Skipped:    2 tests',
      '  Duration:   _ ms',
      ''], 'A')
    .eq((await exec('--group=B', 'test/spawn/before.once.js')).stdout, [
      '',
      '  1 none (skipped)',
      '  2 A (skipped)',
      '',
      '  3 B _ ms',
      '',
      '    Before all',
      '    Before B',
      '    Before A or B',
      '    Not before A',
      '',
      '  4 A and B _ ms',
      '',
      '    Before A',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    2 tests   0 assertions',
      '  Skipped:    2 tests',
      '  Duration:   _ ms',
      ''], 'B')
    .unchain()
    .chain('run skip-group')
    .eq((await exec('--skip-group=A', 'test/spawn/before.once.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    Before all',
      '    Not before A',
      '    Not before B',
      '    Not before A or B',
      '',
      '  2 A (skipped)',
      '',
      '  3 B _ ms',
      '',
      '    Before B',
      '    Before A or B',
      '',
      '  4 A and B (skipped)',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    2 tests   0 assertions',
      '  Skipped:    2 tests',
      '  Duration:   _ ms',
      ''], 'A')
    .eq((await exec('--skip-group=B', 'test/spawn/before.once.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    Before all',
      '    Not before A',
      '    Not before B',
      '    Not before A or B',
      '',
      '  2 A _ ms',
      '',
      '    Before A',
      '    Before A or B',
      '',
      '  3 B (skipped)',
      '  4 A and B (skipped)',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    2 tests   0 assertions',
      '  Skipped:    2 tests',
      '  Duration:   _ ms',
      ''], 'B');
});

test('harness.after', async function () {
  let result;

  result = await exec('test/spawn/after.test.js');
  this.eq(result.stdout, [
    '',
    '  1 (anonymous) _ ms',
    '',
    '    ✔ equals \'test\'',
    '',
    '      1.1 (anonymous) _ ms',
    '',
    '        ✔ equals \'inner.test\'',
    '        ✔ equals \'inner.after\'',
    '',
    '    ✔ equals \'after\'',
    '',
    '',
    '  All tests passed!',
    '',
    '',
    '  Total:      2 tests   4 assertions',
    '  Passing:    2 tests   4 assertions',
    '  Duration:   _ ms',
    ''], 'test');

  result = await exec('test/spawn/after.error.js');
  this.eq(result.stdout.filter(x => !/^\s+ at /.test(x)), [
    '',
    '  1 test 1 _ ms',
    '',
    '    ✔ test 1',
    '    ✔ after',
    '',
    '    ✘ after',
    '',
    '      At:       ./test/spawn/after.error.js (10:8)',
    '      Operator: fail',
    '',
    '    ✘ uncaught error',
    '',
    '      At:       ./test/spawn/after.error.js (13:6)',
    '      Operator: error',
    '      Actual:',
    '        Error: fail',
    '',
    '  2 test 2 _ ms',
    '',
    '    ✔ test 2',
    '    ✔ after',
    '',
    '    ✘ after',
    '',
    '      At:       ./test/spawn/after.error.js (10:8)',
    '      Operator: fail',
    '',
    '    ✘ uncaught error',
    '',
    '      At:       ./test/spawn/after.error.js (13:6)',
    '      Operator: error',
    '      Actual:',
    '        Error: fail',
    '',
    '',
    '  Failed Tests: There was 2 failed tests with 4 failed assertions!',
    '',
    '',
    '  Total:      2 tests   8 assertions',
    '  Passing:    0 tests   4 assertions',
    '  Failing:    2 tests   4 assertions',
    '  Duration:   _ ms',
    ''], 'error');

  result = await exec('test/spawn/after.mixed.js');
  this.eq(result.stdout, [
    '',
    '  1 mixed _ ms',
    '',
    '      1.1 Subtest 1 (inline) _ ms',
    '',
    '      1.2 Subtest 4 (inline) _ ms',
    '',
    '    ✔ ok',
    '',
    '      1.3 Subtest 2 (harness) _ ms',
    '',
    '        After 1',
    '        After 2',
    '',
    '      1.4 Subtest 3 (harness) _ ms',
    '',
    '        After 1',
    '        After 2',
    '',
    '    Top-level after',
    '',
    '  2 (anonymous) _ ms',
    '',
    '    Top-level after (once)',
    '    Top-level after',
    '',
    '',
    '  All tests passed!',
    '',
    '',
    '  Total:      6 tests   1 assertion',
    '  Passing:    6 tests   1 assertion',
    '  Duration:   _ ms',
    ''], 'mixed');

  this
    .chain('group')
    .eq((await exec('test/spawn/after.group.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    After all',
      '    Not after A',
      '    Not after B',
      '    Not after A or B',
      '',
      '  2 A _ ms',
      '',
      '    After all',
      '    After A',
      '    After A or B',
      '    Not after B',
      '',
      '  3 B _ ms',
      '',
      '    After all',
      '    After B',
      '    After A or B',
      '    Not after A',
      '',
      '  4 A and B _ ms',
      '',
      '    After all',
      '    After A',
      '    After B',
      '    After A or B',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    4 tests   0 assertions',
      '  Duration:   _ ms',
      ''], 'all')
    .chain('run only')
    .eq((await exec('--only=none', 'test/spawn/after.group.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    After all',
      '    Not after A',
      '    Not after B',
      '    Not after A or B',
      '',
      '  2 A (skipped)',
      '  3 B (skipped)',
      '  4 A and B (skipped)',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    1 test    0 assertions',
      '  Skipped:    3 tests',
      '  Duration:   _ ms',
      ''], 'none')
    .eq((await exec('--only=A', 'test/spawn/after.group.js')).stdout, [
      '',
      '  1 none (skipped)',
      '',
      '  2 A _ ms',
      '',
      '    After all',
      '    After A',
      '    After A or B',
      '    Not after B',
      '',
      '  3 B (skipped)',
      '  4 A and B (skipped)',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    1 test    0 assertions',
      '  Skipped:    3 tests',
      '  Duration:   _ ms',
      ''], 'A')
    .eq((await exec('--only=B', 'test/spawn/after.group.js')).stdout, [
      '',
      '  1 none (skipped)',
      '  2 A (skipped)',
      '',
      '  3 B _ ms',
      '',
      '    After all',
      '    After B',
      '    After A or B',
      '    Not after A',
      '',
      '  4 A and B (skipped)',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    1 test    0 assertions',
      '  Skipped:    3 tests',
      '  Duration:   _ ms',
      ''], 'B')
    .eq((await exec('--only=A and B', 'test/spawn/after.group.js')).stdout, [
      '',
      '  1 none (skipped)',
      '  2 A (skipped)',
      '  3 B (skipped)',
      '',
      '  4 A and B _ ms',
      '',
      '    After all',
      '    After A',
      '    After B',
      '    After A or B',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    1 test    0 assertions',
      '  Skipped:    3 tests',
      '  Duration:   _ ms',
      ''], 'A and B')
    .unchain()
    .chain('run skip')
    .eq((await exec('--skip=none', 'test/spawn/after.group.js')).stdout, [
      '',
      '  1 none (skipped)',
      '',
      '  2 A _ ms',
      '',
      '    After all',
      '    After A',
      '    After A or B',
      '    Not after B',
      '',
      '  3 B _ ms',
      '',
      '    After all',
      '    After B',
      '    After A or B',
      '    Not after A',
      '',
      '  4 A and B _ ms',
      '',
      '    After all',
      '    After A',
      '    After B',
      '    After A or B',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    3 tests   0 assertions',
      '  Skipped:    1 test',
      '  Duration:   _ ms',
      ''], 'none')
    .eq((await exec('--skip=A', 'test/spawn/after.group.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    After all',
      '    Not after A',
      '    Not after B',
      '    Not after A or B',
      '',
      '  2 A (skipped)',
      '',
      '  3 B _ ms',
      '',
      '    After all',
      '    After B',
      '    After A or B',
      '    Not after A',
      '',
      '  4 A and B _ ms',
      '',
      '    After all',
      '    After A',
      '    After B',
      '    After A or B',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    3 tests   0 assertions',
      '  Skipped:    1 test',
      '  Duration:   _ ms',
      ''], 'A')
    .eq((await exec('--skip=B', 'test/spawn/after.group.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    After all',
      '    Not after A',
      '    Not after B',
      '    Not after A or B',
      '',
      '  2 A _ ms',
      '',
      '    After all',
      '    After A',
      '    After A or B',
      '    Not after B',
      '',
      '  3 B (skipped)',
      '',
      '  4 A and B _ ms',
      '',
      '    After all',
      '    After A',
      '    After B',
      '    After A or B',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    3 tests   0 assertions',
      '  Skipped:    1 test',
      '  Duration:   _ ms',
      ''], 'B')
    .eq((await exec('--skip=A and B', 'test/spawn/after.group.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    After all',
      '    Not after A',
      '    Not after B',
      '    Not after A or B',
      '',
      '  2 A _ ms',
      '',
      '    After all',
      '    After A',
      '    After A or B',
      '    Not after B',
      '',
      '  3 B _ ms',
      '',
      '    After all',
      '    After B',
      '    After A or B',
      '    Not after A',
      '',
      '  4 A and B (skipped)',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    3 tests   0 assertions',
      '  Skipped:    1 test',
      '  Duration:   _ ms',
      ''], 'A and B')
    .unchain()
    .chain('run group')
    .eq((await exec('--group=A', 'test/spawn/after.group.js')).stdout, [
      '',
      '  1 none (skipped)',
      '',
      '  2 A _ ms',
      '',
      '    After all',
      '    After A',
      '    After A or B',
      '    Not after B',
      '',
      '  3 B (skipped)',
      '',
      '  4 A and B _ ms',
      '',
      '    After all',
      '    After A',
      '    After B',
      '    After A or B',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    2 tests   0 assertions',
      '  Skipped:    2 tests',
      '  Duration:   _ ms',
      ''], 'A')
    .eq((await exec('--group=B', 'test/spawn/after.group.js')).stdout, [
      '',
      '  1 none (skipped)',
      '  2 A (skipped)',
      '',
      '  3 B _ ms',
      '',
      '    After all',
      '    After B',
      '    After A or B',
      '    Not after A',
      '',
      '  4 A and B _ ms',
      '',
      '    After all',
      '    After A',
      '    After B',
      '    After A or B',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    2 tests   0 assertions',
      '  Skipped:    2 tests',
      '  Duration:   _ ms',
      ''], 'B')
    .unchain()
    .chain('run skip-group')
    .eq((await exec('--skip-group=A', 'test/spawn/after.group.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    After all',
      '    Not after A',
      '    Not after B',
      '    Not after A or B',
      '',
      '  2 A (skipped)',
      '',
      '  3 B _ ms',
      '',
      '    After all',
      '    After B',
      '    After A or B',
      '    Not after A',
      '',
      '  4 A and B (skipped)',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    2 tests   0 assertions',
      '  Skipped:    2 tests',
      '  Duration:   _ ms',
      ''], 'A')
    .eq((await exec('--skip-group=B', 'test/spawn/after.group.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    After all',
      '    Not after A',
      '    Not after B',
      '    Not after A or B',
      '',
      '  2 A _ ms',
      '',
      '    After all',
      '    After A',
      '    After A or B',
      '    Not after B',
      '',
      '  3 B (skipped)',
      '  4 A and B (skipped)',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    2 tests   0 assertions',
      '  Skipped:    2 tests',
      '  Duration:   _ ms',
      ''], 'B');

  this
    .chain('once')
    .eq((await exec('test/spawn/after.once.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    Not after A or B',
      '',
      '  2 A _ ms',
      '',
      '    Not after B',
      '',
      '  3 B _ ms',
      '',
      '    Not after A',
      '',
      '  4 A and B _ ms',
      '',
      '    After all',
      '    After A',
      '    After B',
      '    After A or B',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    4 tests   0 assertions',
      '  Duration:   _ ms',
      ''], 'all')
    .chain('run only')
    .eq((await exec('--only=none', 'test/spawn/after.once.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    After all',
      '    Not after A',
      '    Not after B',
      '    Not after A or B',
      '',
      '  2 A (skipped)',
      '  3 B (skipped)',
      '  4 A and B (skipped)',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    1 test    0 assertions',
      '  Skipped:    3 tests',
      '  Duration:   _ ms',
      ''], 'none')
    .eq((await exec('--only=A', 'test/spawn/after.once.js')).stdout, [
      '',
      '  1 none (skipped)',
      '',
      '  2 A _ ms',
      '',
      '    After all',
      '    After A',
      '    After A or B',
      '    Not after B',
      '',
      '  3 B (skipped)',
      '  4 A and B (skipped)',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    1 test    0 assertions',
      '  Skipped:    3 tests',
      '  Duration:   _ ms',
      ''], 'A')
    .eq((await exec('--only=B', 'test/spawn/after.once.js')).stdout, [
      '',
      '  1 none (skipped)',
      '  2 A (skipped)',
      '',
      '  3 B _ ms',
      '',
      '    After all',
      '    After B',
      '    After A or B',
      '    Not after A',
      '',
      '  4 A and B (skipped)',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    1 test    0 assertions',
      '  Skipped:    3 tests',
      '  Duration:   _ ms',
      ''], 'B')
    .eq((await exec('--only=A and B', 'test/spawn/after.once.js')).stdout, [
      '',
      '  1 none (skipped)',
      '  2 A (skipped)',
      '  3 B (skipped)',
      '',
      '  4 A and B _ ms',
      '',
      '    After all',
      '    After A',
      '    After B',
      '    After A or B',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    1 test    0 assertions',
      '  Skipped:    3 tests',
      '  Duration:   _ ms',
      ''], 'only "A and B"')
    .unchain()
    .chain('run skip')
    .eq((await exec('--skip=none', 'test/spawn/after.once.js')).stdout, [
      '',
      '  1 none (skipped)',
      '',
      '  2 A _ ms',
      '',
      '    Not after B',
      '',
      '  3 B _ ms',
      '',
      '    Not after A',
      '',
      '  4 A and B _ ms',
      '',
      '    After all',
      '    After A',
      '    After B',
      '    After A or B',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    3 tests   0 assertions',
      '  Skipped:    1 test',
      '  Duration:   _ ms',
      ''], 'none')
    .eq((await exec('--skip=A', 'test/spawn/after.once.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    Not after B',
      '    Not after A or B',
      '',
      '  2 A (skipped)',
      '',
      '  3 B _ ms',
      '',
      '    Not after A',
      '',
      '  4 A and B _ ms',
      '',
      '    After all',
      '    After A',
      '    After B',
      '    After A or B',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    3 tests   0 assertions',
      '  Skipped:    1 test',
      '  Duration:   _ ms',
      ''], 'A')
    .eq((await exec('--skip=B', 'test/spawn/after.once.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    Not after A',
      '    Not after A or B',
      '',
      '  2 A _ ms',
      '',
      '    Not after B',
      '',
      '  3 B (skipped)',
      '',
      '  4 A and B _ ms',
      '',
      '    After all',
      '    After A',
      '    After B',
      '    After A or B',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    3 tests   0 assertions',
      '  Skipped:    1 test',
      '  Duration:   _ ms',
      ''], 'B')
    .eq((await exec('--skip=A and B', 'test/spawn/after.once.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    Not after A or B',
      '',
      '  2 A _ ms',
      '',
      '    After A',
      '    Not after B',
      '',
      '  3 B _ ms',
      '',
      '    After all',
      '    After B',
      '    After A or B',
      '    Not after A',
      '',
      '  4 A and B (skipped)',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    3 tests   0 assertions',
      '  Skipped:    1 test',
      '  Duration:   _ ms',
      ''], 'A and B')
    .unchain()
    .chain('run group')
    .eq((await exec('--group=A', 'test/spawn/after.once.js')).stdout, [
      '',
      '  1 none (skipped)',
      '',
      '  2 A _ ms',
      '',
      '    Not after B',
      '',
      '  3 B (skipped)',
      '',
      '  4 A and B _ ms',
      '',
      '    After all',
      '    After A',
      '    After B',
      '    After A or B',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    2 tests   0 assertions',
      '  Skipped:    2 tests',
      '  Duration:   _ ms',
      ''], 'A')
    .eq((await exec('--group=B', 'test/spawn/after.once.js')).stdout, [
      '',
      '  1 none (skipped)',
      '  2 A (skipped)',
      '',
      '  3 B _ ms',
      '',
      '    Not after A',
      '',
      '  4 A and B _ ms',
      '',
      '    After all',
      '    After A',
      '    After B',
      '    After A or B',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    2 tests   0 assertions',
      '  Skipped:    2 tests',
      '  Duration:   _ ms',
      ''], 'B')
    .unchain()
    .chain('run skip-group')
    .eq((await exec('--skip-group=A', 'test/spawn/after.once.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    Not after B',
      '    Not after A or B',
      '',
      '  2 A (skipped)',
      '',
      '  3 B _ ms',
      '',
      '    After all',
      '    After B',
      '    After A or B',
      '    Not after A',
      '',
      '  4 A and B (skipped)',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    2 tests   0 assertions',
      '  Skipped:    2 tests',
      '  Duration:   _ ms',
      ''], 'A')
    .eq((await exec('--skip-group=B', 'test/spawn/after.once.js')).stdout, [
      '',
      '  1 none _ ms',
      '',
      '    Not after A',
      '    Not after A or B',
      '',
      '  2 A _ ms',
      '',
      '    After all',
      '    After A',
      '    After A or B',
      '    Not after B',
      '',
      '  3 B (skipped)',
      '  4 A and B (skipped)',
      '',
      '',
      '  All tests passed!',
      '',
      '',
      '  Total:      4 tests   0 assertions',
      '  Passing:    2 tests   0 assertions',
      '  Skipped:    2 tests',
      '  Duration:   _ ms',
      ''], 'B');
});

test('harness.extend', async function () {
  let result;

  result = await exec('test/spawn/extend.js');
  this.eq(result.stdout.filter(x => !/^\s+ at /.test(x)), [
    '',
    '  1 test _ ms',
    '',
    '    ✔ before lack property "lol"',
    '    ✔ extended before has property "lol"',
    '    ✔ test lack property "lol"',
    '',
    '      1.1 non-extended inline subtest _ ms',
    '',
    '        ✔ non-extended inline subtest lack property "lol"',
    '',
    '      1.2 non-extended subtest _ ms',
    '',
    '        ✔ non-extended subtest lack property "lol"',
    '',
    '      1.3 extended subtest _ ms',
    '',
    '        ✔ extended subtest has property "lol"',
    '',
    '    ✔ after lack property "lol"',
    '    ✔ extended after has property "lol"',
    '',
    '  2 extended _ ms',
    '',
    '    ✔ before lack property "lol"',
    '    ✔ extended before has property "lol"',
    '    ✔ extended test has property "lol"',
    '',
    '      2.1 extended inline subtest _ ms',
    '',
    '        ✔ extended inline subtest has property "lol"',
    '',
    '      2.2 non-extended subtest _ ms',
    '',
    '        ✔ non-extended subtest lack property "lol"',
    '',
    '      2.3 extended subtest _ ms',
    '',
    '        ✔ extended subtest has property "lol"',
    '',
    '    ✔ after lack property "lol"',
    '    ✔ extended after has property "lol"',
    '',
    '',
    '  All tests passed!',
    '',
    '',
    '  Total:      8 tests   16 assertions',
    '  Passing:    8 tests   16 assertions',
    '  Duration:   _ ms',
    ''], 'scope');

  result = await exec('test/spawn/extend.getset.js');
  this.eq(result.stdout.filter(x => !/^\s+ at /.test(x)), [
    '',
    '  1 (anonymous) _ ms',
    '',
    '    getter called',
    '    lol lol',
    '    getter called',
    '    lol lol',
    '    setter called',
    '    getter called',
    '    rofl rofl',
    '    getter called',
    '    rofl rofl',
    '',
    '',
    '  All tests passed!',
    '',
    '',
    '  Total:      1 test    0 assertions',
    '  Passing:    1 test    0 assertions',
    '  Duration:   _ ms',
    ''], 'getter/setter');

  result = await exec('test/spawn/extend.trace.js');
  this.eq(result.stdout.filter(x => !/^\s+ at /.test(x)), [
    '',
    '  1 test _ ms',
    '',
    '    ✘ is lol',
    '',
    '      At:       ./test/spawn/extend.trace.js (13:8)',
    '      Operator: lol',
    '      Expected: \'lol\'',
    '      Actual:   \'rofl\'',
    '',
    '',
    '  Failed Tests: There was 1 failed test with 1 failed assertion!',
    '',
    '',
    '  Total:      1 test    1 assertion',
    '  Passing:    0 tests   0 assertions',
    '  Failing:    1 test    1 assertion',
    '  Duration:   _ ms',
    ''], 'trace');

  result = await exec('test/spawn/extend.protected.js');
  this.chain('protected')
    .contains(
      result.stderr.filter(x => !/^\s+ at /.test(x)),
      'Error: extend overwrites protected name \'_lol\'', 'throws error')
    .ne(result.code, 0, 'exits with non-zero exit code');
});
