'use strict';

const test = require('..');
const exec = require('./exec');


test('harness.before', async function () {
  let result;

  result = await exec('test/spawn/before.error.js');
  this.eq(result.stdout.filter(x => !/^\s+ at /.test(x)), [
    '',
    '  1 test 1 _ ms',
    '',
    '    ✔ before',
    '',
    '    ✘ before',
    '',
    '      At:       ./test/spawn/before.error.js (10:8)',
    '      Operator: fail',
    '',
    '    ✘ uncaught error',
    '',
    '      At:       ./test/spawn/before.error.js (13:6)',
    '      Operator: error',
    '      Actual:',
    '        Error: fail',
    '',
    '  2 test 2 _ ms',
    '',
    '    ✔ before',
    '',
    '    ✘ before',
    '',
    '      At:       ./test/spawn/before.error.js (10:8)',
    '      Operator: fail',
    '',
    '    ✘ uncaught error',
    '',
    '      At:       ./test/spawn/before.error.js (13:6)',
    '      Operator: error',
    '      Actual:',
    '        Error: fail',
    '',
    '',
    '  Failed Tests: There was 2 failed tests with 4 failed assertions!',
    '',
    '',
    '  Total:      2 tests   6 assertions',
    '  Passing:    0 tests   2 assertions',
    '  Failing:    2 tests   4 assertions',
    '  Duration:   _ ms',
    ''], 'error');

  result = await exec('test/spawn/before.mixed.js');
  this.eq(result.stdout, [
    '',
    '  1 mixed _ ms',
    '',
    '    Top-level before (once)',
    '    Top-level before',
    '',
    '      1.1 Subtest 1 (inline) _ ms',
    '',
    '      1.2 Subtest 4 (inline) _ ms',
    '',
    '    ✔ ok',
    '',
    '      1.3 Subtest 2 (harness) _ ms',
    '',
    '        Before 1',
    '        Before 2',
    '',
    '      1.4 Subtest 3 (harness) _ ms',
    '',
    '        Before 1',
    '        Before 2',
    '',
    '  2 (anonymous) _ ms',
    '',
    '    Top-level before',
    '',
    '',
    '  All tests passed!',
    '',
    '',
    '  Total:      6 tests   1 assertion',
    '  Passing:    6 tests   1 assertion',
    '  Duration:   _ ms',
    ''], 'mixed');

  result = await exec('test/spawn/before.group.js');
  this.eq(result.stdout, [
    '',
    '  1 none _ ms',
    '',
    '    Before all',
    '    Not before A',
    '    Not before B',
    '    Not before A or B',
    '',
    '  2 A _ ms',
    '',
    '    Before all',
    '    Before A',
    '    Before A or B',
    '    Not before B',
    '',
    '  3 B _ ms',
    '',
    '    Before all',
    '    Before B',
    '    Before A or B',
    '    Not before A',
    '',
    '  4 A and B _ ms',
    '',
    '    Before all',
    '    Before A',
    '    Before B',
    '    Before A or B',
    '',
    '',
    '  All tests passed!',
    '',
    '',
    '  Total:      4 tests   0 assertions',
    '  Passing:    4 tests   0 assertions',
    '  Duration:   _ ms',
    ''], 'group');

  result = await exec('test/spawn/before.once.js');
  this.eq(result.stdout, [
    '',
    '  1 none _ ms',
    '',
    '    Before all',
    '    Not before A',
    '    Not before B',
    '    Not before A or B',
    '',
    '  2 A _ ms',
    '',
    '    Before A',
    '    Before A or B',
    '',
    '  3 B _ ms',
    '',
    '    Before B',
    '',
    '  4 A and B _ ms',
    '',
    '',
    '  All tests passed!',
    '',
    '',
    '  Total:      4 tests   0 assertions',
    '  Passing:    4 tests   0 assertions',
    '  Duration:   _ ms',
    ''], 'once');
});

test('harness.after', async function () {
  let result;

  result = await exec('test/spawn/after.error.js');
  this.eq(result.stdout.filter(x => !/^\s+ at /.test(x)), [
    '',
    '  1 test 1 _ ms',
    '',
    '    ✔ test 1',
    '    ✔ after',
    '',
    '    ✘ after',
    '',
    '      At:       ./test/spawn/after.error.js (10:8)',
    '      Operator: fail',
    '',
    '    ✘ uncaught error',
    '',
    '      At:       ./test/spawn/after.error.js (13:6)',
    '      Operator: error',
    '      Actual:',
    '        Error: fail',
    '',
    '  2 test 2 _ ms',
    '',
    '    ✔ test 2',
    '    ✔ after',
    '',
    '    ✘ after',
    '',
    '      At:       ./test/spawn/after.error.js (10:8)',
    '      Operator: fail',
    '',
    '    ✘ uncaught error',
    '',
    '      At:       ./test/spawn/after.error.js (13:6)',
    '      Operator: error',
    '      Actual:',
    '        Error: fail',
    '',
    '',
    '  Failed Tests: There was 2 failed tests with 4 failed assertions!',
    '',
    '',
    '  Total:      2 tests   8 assertions',
    '  Passing:    0 tests   4 assertions',
    '  Failing:    2 tests   4 assertions',
    '  Duration:   _ ms',
    ''], 'error');

  result = await exec('test/spawn/after.mixed.js');
  this.eq(result.stdout, [
    '',
    '  1 mixed _ ms',
    '',
    '      1.1 Subtest 1 (inline) _ ms',
    '',
    '      1.2 Subtest 4 (inline) _ ms',
    '',
    '    ✔ ok',
    '',
    '      1.3 Subtest 2 (harness) _ ms',
    '',
    '        After 1',
    '        After 2',
    '',
    '      1.4 Subtest 3 (harness) _ ms',
    '',
    '        After 1',
    '        After 2',
    '',
    '    Top-level after',
    '',
    '  2 (anonymous) _ ms',
    '',
    '    Top-level after (once)',
    '    Top-level after',
    '',
    '',
    '  All tests passed!',
    '',
    '',
    '  Total:      6 tests   1 assertion',
    '  Passing:    6 tests   1 assertion',
    '  Duration:   _ ms',
    ''], 'mixed');

  result = await exec('test/spawn/after.group.js');
  this.eq(result.stdout, [
    '',
    '  1 none _ ms',
    '',
    '    After all',
    '    Not after A',
    '    Not after B',
    '    Not after A or B',
    '',
    '  2 A _ ms',
    '',
    '    After all',
    '    After A',
    '    After A or B',
    '    Not after B',
    '',
    '  3 B _ ms',
    '',
    '    After all',
    '    After B',
    '    After A or B',
    '    Not after A',
    '',
    '  4 A and B _ ms',
    '',
    '    After all',
    '    After A',
    '    After B',
    '    After A or B',
    '',
    '',
    '  All tests passed!',
    '',
    '',
    '  Total:      4 tests   0 assertions',
    '  Passing:    4 tests   0 assertions',
    '  Duration:   _ ms',
    ''], 'group');

  result = await exec('test/spawn/after.once.js');
  this.eq(result.stdout, [
    '',
    '  1 none _ ms',
    '',
    '    Not after A or B',
    '',
    '  2 A _ ms',
    '',
    '    Not after B',
    '',
    '  3 B _ ms',
    '',
    '    Not after A',
    '',
    '  4 A and B _ ms',
    '',
    '    After all',
    '    After A',
    '    After B',
    '    After A or B',
    '',
    '',
    '  All tests passed!',
    '',
    '',
    '  Total:      4 tests   0 assertions',
    '  Passing:    4 tests   0 assertions',
    '  Duration:   _ ms',
    ''], 'once');
});
